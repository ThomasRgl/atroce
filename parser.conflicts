
** Conflict (shift/reduce) in state 68.
** Token involved: Lmul
** This state is reached from prog after reading:

Lvar Lvar Lopar loption(separated_nonempty_list(Lcomma,param)) Lcpar Lobrace Lvar

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

prog 
def prog 
funcDef 
Lvar Lvar Lopar loption(separated_nonempty_list(Lcomma,param)) Lcpar Lobrace block Lcbrace 
                                                                             list(instr) 
                                                                             instr list(instr) 
                                                                             (?)

** In state 68, looking ahead at Lmul, shifting is permitted
** because of the following sub-derivation:

declInstr Lsc 
Lvar separated_nonempty_list(Lcomma,expr) 
     expr 
     assignExpr 
     lvalue Lassign expr 
     leftValueAdrrExpr 
     . Lmul Lvar 

** In state 68, looking ahead at Lmul, reducing production
** varExpr -> Lvar
** is permitted because of the following sub-derivation:

exprInstr Lsc 
expr 
opExpr 
expr Lmul expr // lookahead token appears
varExpr // lookahead token is inherited
Lvar . 
